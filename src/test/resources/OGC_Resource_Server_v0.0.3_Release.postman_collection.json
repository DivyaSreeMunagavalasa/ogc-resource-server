{
	"info": {
		"_postman_id": "497f62d9-dec2-4210-8e63-2abaaf3c21ac",
		"name": "OGC Resource Server v0.0.3 Release",
		"description": "Components/APIs used in the OGC Compliant Resource Server.\n\nOGC Features API standard can be found at\n\n[\"OGC API - Features - Part 1: Core corrigendum standard\"](https://docs.opengeospatial.org/is/17-069r4/17-069r4.html).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28022201"
	},
	"item": [
		{
			"name": "Get Tokens",
			"item": [
				{
					"name": "Get Secure Resource Token (Consumer 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get accessToken from AAA Server for Consumer 1\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"C1secureResourceToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{client1Id}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{client1Secret}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"1e7f3be1-5d07-4cba-9c8c-5c3a2fd5c82a\", \n  \"itemType\": \"resource\",\n  \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{authBaseUrl}}/{{authBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{authBaseUrl}}"
							],
							"path": [
								"{{authBasePath}}",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Secure Resource Token (Consumer 1) for resource 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get accessToken from AAA Server for Consumer 1\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"C1secureResource2Token\", jsonData.results.accessToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{client1Id}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{client1Secret}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"6dbcd15f-b497-42cd-8468-e3ecdf2daf7d\", \n  \"itemType\": \"resource\",\n  \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{authBaseUrl}}/{{authBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{authBaseUrl}}"
							],
							"path": [
								"{{authBasePath}}",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Open Resource (feature Collection) Token (Consumer 1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get open accessToken from AAA Server for Consumer 1\", function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"C1openResourceToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{client1Id}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{client1Secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"ogc.iudx.io\",\n  \"itemType\": \"resource_server\",\n  \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{authBaseUrl}}/{{authBasePath}}/token?id=a5a6e26f-d252-446d-b7dd-4d50ea945102",
							"protocol": "https",
							"host": [
								"{{authBaseUrl}}"
							],
							"path": [
								"{{authBasePath}}",
								"token"
							],
							"query": [
								{
									"key": "id",
									"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Feature Collections",
			"item": [
				{
					"name": "{collectionId}",
					"item": [
						{
							"name": "items",
							"item": [
								{
									"name": "fetch features",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\");",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "[ [ 7.01, 50.63, 7.22, 50.78 ] ]",
													"description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												}
											]
										},
										"description": "Fetch features of the feature collection with id `collectionId`.\n\nEvery feature in a dataset belongs to a collection. A dataset may\nconsist of multiple feature collections. A feature collection is often a\ncollection of features of a similar type, based on a common schema.\n\nUse content negotiation to request HTML or GeoJSON."
									},
									"response": [
										{
											"name": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, t",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"features\": [\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    }\n  ],\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"timeStamp\": \"<dateTime>\",\n  \"numberMatched\": \"<integer>\",\n  \"numberReturned\": \"<integer>\"\n}"
										},
										{
											"name": "A query parameter has an invalid value.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch features unkown query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Unknown query parameter\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"code\",\"Bad Request\");",
													"    pm.expect(jsonBody).to.have.property(\"description\");",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?unkownparameter=unknownvalue",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "[ [ 7.01, 50.63, 7.22, 50.78 ] ]",
													"description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
													"disabled": true
												},
												{
													"key": "unkownparameter",
													"value": "unknownvalue"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												}
											]
										},
										"description": "Fetch features of the feature collection with id `collectionId`.\n\nEvery feature in a dataset belongs to a collection. A dataset may\nconsist of multiple feature collections. A feature collection is often a\ncollection of features of a similar type, based on a common schema.\n\nUse content negotiation to request HTML or GeoJSON."
									},
									"response": [
										{
											"name": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, t",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"features\": [\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    }\n  ],\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"timeStamp\": \"<dateTime>\",\n  \"numberMatched\": \"<integer>\",\n  \"numberReturned\": \"<integer>\"\n}"
										},
										{
											"name": "A query parameter has an invalid value.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch features with crs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\");",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?crs=http://www.opengis.net/def/crs/EPSG/0/27700",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "[ [ 7.01, 50.63, 7.22, 50.78 ] ]",
													"description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
													"disabled": true
												},
												{
													"key": "crs",
													"value": "http://www.opengis.net/def/crs/EPSG/0/27700"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "1e7f3be1-5d07-4cba-9c8c-5c3a2fd5c82a",
													"description": "(Required) local identifier of a collection"
												}
											]
										},
										"description": "Fetch features of the feature collection with id `collectionId`.\n\nEvery feature in a dataset belongs to a collection. A dataset may\nconsist of multiple feature collections. A feature collection is often a\ncollection of features of a similar type, based on a common schema.\n\nUse content negotiation to request HTML or GeoJSON."
									},
									"response": [
										{
											"name": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, t",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"features\": [\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    }\n  ],\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"timeStamp\": \"<dateTime>\",\n  \"numberMatched\": \"<integer>\",\n  \"numberReturned\": \"<integer>\"\n}"
										},
										{
											"name": "A query parameter has an invalid value.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch features with bbox-crs not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Unknown bbox-crs parameter\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"code\",\"Bad Request\");",
													"    pm.expect(jsonBody).to.have.property(\"description\");",
													"    });",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?bbox=-7.55,49.76,1.11,57.70&crs=http://www.opengis.net/def/crs/EPSG/0/27700&bbox-crs=http://www.opengis.net/def/crs/OGC/1.3/unknown",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "-7.55,49.76,1.11,57.70",
													"description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries."
												},
												{
													"key": "datetime",
													"value": "<string>",
													"description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
													"disabled": true
												},
												{
													"key": "crs",
													"value": "http://www.opengis.net/def/crs/EPSG/0/27700"
												},
												{
													"key": "bbox-crs",
													"value": "http://www.opengis.net/def/crs/OGC/1.3/unknown"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "1e7f3be1-5d07-4cba-9c8c-5c3a2fd5c82a"
												}
											]
										},
										"description": "Fetch features of the feature collection with id `collectionId`.\n\nEvery feature in a dataset belongs to a collection. A dataset may\nconsist of multiple feature collections. A feature collection is often a\ncollection of features of a similar type, based on a common schema.\n\nUse content negotiation to request HTML or GeoJSON."
									},
									"response": [
										{
											"name": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, t",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"features\": [\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    }\n  ],\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"timeStamp\": \"<dateTime>\",\n  \"numberMatched\": \"<integer>\",\n  \"numberReturned\": \"<integer>\"\n}"
										},
										{
											"name": "A query parameter has an invalid value.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch features with bbox-crs (WGS84)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\");",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?bbox=-7.55,49.76,1.11,57.70&bbox-crs=http://www.opengis.net/def/crs/OGC/1.3/CRS84",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "-7.55,49.76,1.11,57.70",
													"description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries."
												},
												{
													"key": "datetime",
													"value": "<string>",
													"description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
													"disabled": true
												},
												{
													"key": "crs",
													"value": "http://www.opengis.net/def/crs/EPSG/0/27700",
													"disabled": true
												},
												{
													"key": "bbox-crs",
													"value": "http://www.opengis.net/def/crs/OGC/1.3/CRS84"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "1e7f3be1-5d07-4cba-9c8c-5c3a2fd5c82a",
													"description": "(Required) local identifier of a collection"
												}
											]
										},
										"description": "Fetch features of the feature collection with id `collectionId`.\n\nEvery feature in a dataset belongs to a collection. A dataset may\nconsist of multiple feature collections. A feature collection is often a\ncollection of features of a similar type, based on a common schema.\n\nUse content negotiation to request HTML or GeoJSON."
									},
									"response": [
										{
											"name": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, t",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"features\": [\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    }\n  ],\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"timeStamp\": \"<dateTime>\",\n  \"numberMatched\": \"<integer>\",\n  \"numberReturned\": \"<integer>\"\n}"
										},
										{
											"name": "A query parameter has an invalid value.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch features with bbox-crs (EPSG:27700)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\");",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    pm.expect(jsonBody).to.have.property(\"type\");",
													"    pm.expect(jsonBody).to.have.property(\"links\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?bbox= -7.557159806905192,49.76680723514262,               1.112473832170855,57.70488356766183&bbox-crs=http://www.opengis.net/def/crs/EPSG/0/27700",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": " -7.557159806905192,49.76680723514262,               1.112473832170855,57.70488356766183",
													"description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries."
												},
												{
													"key": "datetime",
													"value": "<string>",
													"description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
													"disabled": true
												},
												{
													"key": "crs",
													"value": "http://www.opengis.net/def/crs/EPSG/0/27700",
													"disabled": true
												},
												{
													"key": "bbox-crs",
													"value": "http://www.opengis.net/def/crs/EPSG/0/27700"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "1e7f3be1-5d07-4cba-9c8c-5c3a2fd5c82a",
													"description": "(Required) local identifier of a collection"
												}
											]
										},
										"description": "Fetch features of the feature collection with id `collectionId`.\n\nEvery feature in a dataset belongs to a collection. A dataset may\nconsist of multiple feature collections. A feature collection is often a\ncollection of features of a similar type, based on a common schema.\n\nUse content negotiation to request HTML or GeoJSON."
									},
									"response": [
										{
											"name": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, t",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"features\": [\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    }\n  ],\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"timeStamp\": \"<dateTime>\",\n  \"numberMatched\": \"<integer>\",\n  \"numberReturned\": \"<integer>\"\n}"
										},
										{
											"name": "A query parameter has an invalid value.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch a single feature",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var feature = pm.response.json();",
													"    pm.expect(feature).to.have.property(\"id\",1729);",
													"    pm.expect(feature).to.have.property(\"properties\");",
													"    pm.expect(feature).to.have.property(\"type\");",
													"    pm.expect(feature).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items",
												":featureId"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												},
												{
													"key": "featureId",
													"value": "1729",
													"description": "(Required) local identifier of a feature"
												}
											]
										},
										"description": "Fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`.\n\nUse content negotiation to request HTML or GeoJSON."
									},
									"response": [
										{
											"name": "fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items",
														":featureId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														},
														{
															"key": "featureId",
															"value": "<string>",
															"description": "(Required) local identifier of a feature"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"geometry\": {\n    \"type\": \"<string>\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ]\n  },\n  \"properties\": \"<object>\",\n  \"id\": \"<string>\",\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ]\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items",
														":featureId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														},
														{
															"key": "featureId",
															"value": "<string>",
															"description": "(Required) local identifier of a feature"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items",
														":featureId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														},
														{
															"key": "featureId",
															"value": "<string>",
															"description": "(Required) local identifier of a feature"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch a single feature different crs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var feature = pm.response.json();",
													"    pm.expect(feature).to.have.property(\"id\",1729);",
													"    pm.expect(feature).to.have.property(\"properties\");",
													"    pm.expect(feature).to.have.property(\"type\");",
													"    pm.expect(feature).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});",
													"",
													"pm.test(\"Crs header\", function () {",
													"    pm.response.to.have.header(\"Content-Crs\", \"<http://www.opengis.net/def/crs/EPSG/0/27700>\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId?crs=http://www.opengis.net/def/crs/EPSG/0/27700",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items",
												":featureId"
											],
											"query": [
												{
													"key": "crs",
													"value": "http://www.opengis.net/def/crs/EPSG/0/27700"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "1e7f3be1-5d07-4cba-9c8c-5c3a2fd5c82a",
													"type": "string",
													"description": "(Required) local identifier of a collection"
												},
												{
													"key": "featureId",
													"value": "1729"
												}
											]
										},
										"description": "Fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`.\n\nUse content negotiation to request HTML or GeoJSON."
									},
									"response": [
										{
											"name": "fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items",
														":featureId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														},
														{
															"key": "featureId",
															"value": "<string>",
															"description": "(Required) local identifier of a feature"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"geometry\": {\n    \"type\": \"<string>\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ]\n  },\n  \"properties\": \"<object>\",\n  \"id\": \"<string>\",\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ]\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items",
														":featureId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														},
														{
															"key": "featureId",
															"value": "<string>",
															"description": "(Required) local identifier of a feature"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items",
														":featureId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														},
														{
															"key": "featureId",
															"value": "<string>",
															"description": "(Required) local identifier of a feature"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch features with limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",5);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "bbox",
													"value": "",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "5"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features with bbox and limit parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",5);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=5&bbox=-7.55,49.76,1.11,57.70",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "bbox",
													"value": "-7.55,49.76,1.11,57.70"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features with parameters limit, bbox and filter (postcode)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\",1);",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",1);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    const properties = features.properties;",
													"    pm.expect(properties).to.have.property(\"postcode\",\"BB18 5WE\")",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=5&bbox=-7.55,49.76,1.11,57.70&postcode=BB18 5WE",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "bbox",
													"value": "-7.55,49.76,1.11,57.70"
												},
												{
													"key": "postcode",
													"value": "BB18 5WE"
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features with parameters limit and filter (postcode)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\",1);",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",1);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    const properties = features.properties;",
													"    pm.expect(properties).to.have.property(\"postcode\",\"BB18 5WE\")",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=5&postcode=BB18 5WE",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "76.63,30.37,76.9,31.0",
													"disabled": true
												},
												{
													"key": "postcode",
													"value": "BB18 5WE"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features with additional filter (postcode=CB21 5NQ)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\");",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    const properties = features.properties;",
													"    pm.expect(properties).to.have.property(\"postcode\",\"CB21 5NQ\")",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?postcode=CB21 5NQ",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "[ [ 7.01, 50.63, 7.22, 50.78 ] ]",
													"description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
													"disabled": true
												},
												{
													"key": "postcode",
													"value": "CB21 5NQ"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": [
										{
											"name": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, t",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"features\": [\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    }\n  ],\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"timeStamp\": \"<dateTime>\",\n  \"numberMatched\": \"<integer>\",\n  \"numberReturned\": \"<integer>\"\n}"
										},
										{
											"name": "A query parameter has an invalid value.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch features with bbox parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\");",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?bbox=-7.55,49.76,1.11,57.70",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "-7.55,49.76,1.11,57.70"
												},
												{
													"key": "limit",
													"value": "1",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features, collection does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Collection not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"code\",\"Not found\");",
													"    pm.expect(jsonBody).to.have.property(\"description\",\"Collection not found\");",
													"    });",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "bbox",
													"value": "",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "unknownCollection",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch a single feature, feature does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Collection not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"code\",\"Not found\");",
													"    pm.expect(jsonBody).to.have.property(\"description\",\"Feature not found\");",
													"    });",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items",
												":featureId"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												},
												{
													"key": "featureId",
													"value": "1729990",
													"description": "(Required) local identifier of a feature"
												}
											]
										}
									},
									"response": [
										{
											"name": "fetch the feature with id `featureId` in the feature collection\nwith id `collectionId`",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items",
														":featureId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														},
														{
															"key": "featureId",
															"value": "<string>",
															"description": "(Required) local identifier of a feature"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"geometry\": {\n    \"type\": \"<string>\",\n    \"coordinates\": [\n      \"<number>\",\n      \"<number>\"\n    ]\n  },\n  \"properties\": \"<object>\",\n  \"id\": \"<string>\",\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ]\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items",
														":featureId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														},
														{
															"key": "featureId",
															"value": "<string>",
															"description": "(Required) local identifier of a feature"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items/:featureId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items",
														":featureId"
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														},
														{
															"key": "featureId",
															"value": "<string>",
															"description": "(Required) local identifier of a feature"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch features with offset parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",10000);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?offset=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "[ [ 7.01, 50.63, 7.22, 50.78 ] ]",
													"description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
													"disabled": true
												},
												{
													"key": "offset",
													"value": "20"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": [
										{
											"name": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, t",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"features\": [\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    }\n  ],\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"timeStamp\": \"<dateTime>\",\n  \"numberMatched\": \"<integer>\",\n  \"numberReturned\": \"<integer>\"\n}"
										},
										{
											"name": "A query parameter has an invalid value.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch features with limit and offset parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",5);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1openResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=5&offset=600",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "limit",
													"value": "10",
													"description": "The optional limit parameter limits the number of items that are presented in the response document.\n\nOnly items are counted that are on the first level of the collection in the response document.\nNested objects contained within the explicitly requested items shall not be counted.\n\nMinimum = 1. Maximum = 10000. Default = 10.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "[ [ 7.01, 50.63, 7.22, 50.78 ] ]",
													"description": "Only features that have a geometry that intersects the bounding box are selected.\nThe bounding box is provided as four or six numbers, depending on whether the\ncoordinate reference system includes a vertical axis (height or depth):\n\n* Lower left corner, coordinate axis 1\n* Lower left corner, coordinate axis 2\n* Minimum value, coordinate axis 3 (optional)\n* Upper right corner, coordinate axis 1\n* Upper right corner, coordinate axis 2\n* Maximum value, coordinate axis 3 (optional)\n\nIf the value consists of four numbers, the coordinate reference system is\nWGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nIf the value consists of six numbers, the coordinate reference system is WGS 84\nlongitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)\nunless a different coordinate reference system is specified in the parameter `bbox-crs`.\n\nThe query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate\nReference Systems by Reference.\n\nFor WGS 84 longitude/latitude the values are in most cases the sequence of\nminimum longitude, minimum latitude, maximum longitude and maximum latitude.\nHowever, in cases where the box spans the antimeridian the first value\n(west-most box edge) is larger than the third value (east-most box edge).\n\nIf the vertical axis is included, the third and the sixth number are\nthe bottom and the top of the 3-dimensional bounding box.\n\nIf a feature has multiple spatial geometry properties, it is the decision of the\nserver whether only a single spatial geometry property is used to determine\nthe extent or all relevant geometries.",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"description": "Either a date-time or an interval. Date and time expressions adhere to RFC 3339.\nIntervals may be bounded or half-bounded (double-dots at start or end).\n\nExamples:\n\n* A date-time: \"2018-02-12T23:20:50Z\"\n* A bounded interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\"\n* Half-bounded intervals: \"2018-02-12T00:00:00Z/..\" or \"../2018-03-18T12:31:12Z\"\n\nOnly features that have a temporal property that intersects the value of\n`datetime` are selected.\n\nIf a feature has multiple temporal properties, it is the decision of the\nserver whether only a single temporal property is used to determine\nthe extent or all relevant temporal properties.",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "offset",
													"value": "600"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": [
										{
											"name": "The response is a document consisting of features in the collection.\nThe features included in the response are determined by the server\nbased on the query parameters of the request. To support access to\nlarger collections without overloading the client, t",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/geo+json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/geo+json"
												}
											],
											"cookie": [],
											"body": "{\n  \"type\": \"<string>\",\n  \"features\": [\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    },\n    {\n      \"type\": \"<string>\",\n      \"geometry\": {\n        \"type\": \"<string>\",\n        \"coordinates\": [\n          \"<number>\",\n          \"<number>\"\n        ]\n      },\n      \"properties\": \"<object>\",\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ]\n    }\n  ],\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"timeStamp\": \"<dateTime>\",\n  \"numberMatched\": \"<integer>\",\n  \"numberReturned\": \"<integer>\"\n}"
										},
										{
											"name": "A query parameter has an invalid value.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										},
										{
											"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "A server error occurred.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/collections/:collectionId/items?limit=10&bbox=&datetime=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"collections",
														":collectionId",
														"items"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														},
														{
															"key": "bbox",
															"value": ""
														},
														{
															"key": "datetime",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "collectionId",
															"value": "<string>",
															"description": "(Required) local identifier of a collection"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "fetch features with limit and date-time (equals) parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",1);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    const properties = features.properties;",
													"    pm.expect(properties).to.have.property(\"tpep_pickup_datetime\",\"2024-01-01 04:26:24\")",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResource2Token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=5&datetime=2024-01-01T04:26:24Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "bbox",
													"value": "",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "datetime",
													"value": "2024-01-01T04:26:24Z"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "6dbcd15f-b497-42cd-8468-e3ecdf2daf7d",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features with limit and date-time (after) parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",2);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    const properties = features.properties;",
													"    pm.expect(properties).to.have.property(\"tpep_pickup_datetime\");",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResource2Token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=2&datetime=2024-01-01T00:00:00Z/..",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "bbox",
													"value": "",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "2"
												},
												{
													"key": "datetime",
													"value": "2024-01-01T00:00:00Z/.."
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "6dbcd15f-b497-42cd-8468-e3ecdf2daf7d",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features with limit and date-time (before) parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",2);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    const properties = features.properties;",
													"    pm.expect(properties).to.have.property(\"tpep_pickup_datetime\")",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResource2Token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=2&datetime=../2024-01-12T09:00:00Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "bbox",
													"value": "",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "2"
												},
												{
													"key": "datetime",
													"value": "../2024-01-12T09:00:00Z"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "6dbcd15f-b497-42cd-8468-e3ecdf2daf7d",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features with limit and date-time (between) parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",2);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    const properties = features.properties;",
													"    pm.expect(properties).to.have.property(\"tpep_pickup_datetime\")",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResource2Token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=2&datetime=2024-01-01T00:00:00Z/2024-01-02T00:00:00Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "bbox",
													"value": "",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "2"
												},
												{
													"key": "datetime",
													"value": "2024-01-01T00:00:00Z/2024-01-02T00:00:00Z"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "6dbcd15f-b497-42cd-8468-e3ecdf2daf7d",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features with limit and malformed date-time parameter (400 Bad request)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Assert Body\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"code\",\"Bad Request\");",
													"    pm.expect(jsonBody).to.have.property(\"description\");",
													"    });",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResource2Token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=2&datetime=datetimemalformed",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "bbox",
													"value": "",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "2"
												},
												{
													"key": "datetime",
													"value": "datetimemalformed"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "6dbcd15f-b497-42cd-8468-e3ecdf2daf7d",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features with limit and date-time (equals) parameter for a collection with no datetime property",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"numberMatched\");",
													"    pm.expect(jsonBody).to.have.property(\"numberReturned\",5);",
													"    pm.expect(jsonBody).to.have.property(\"features\");",
													"    const features = jsonBody.features[0];",
													"    pm.expect(features).to.have.property(\"id\");",
													"    pm.expect(features).to.have.property(\"properties\");",
													"    const properties = features.properties;",
													"    pm.expect(properties).to.not.have.property(\"datetime\")",
													"    pm.expect(features).to.have.property(\"type\");",
													"    pm.expect(features).to.have.property(\"geometry\");",
													"});",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items?limit=5&datetime=2023-07-25T12:52:36%2B05:30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "bbox",
													"value": "",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												},
												{
													"key": "limit",
													"value": "5"
												},
												{
													"key": "datetime",
													"value": "2023-07-25T12:52:36%2B05:30"
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "1e7f3be1-5d07-4cba-9c8c-5c3a2fd5c82a",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "fetch features, collection does not exist value is not valid uuid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Collection not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"pm.test(\"Assert Body (features)\", function () {",
													"    pm.response.to.have.json;",
													"    var jsonBody = pm.response.json();",
													"    pm.expect(jsonBody).to.have.property(\"code\",\"Not found\");",
													"    pm.expect(jsonBody).to.have.property(\"description\",\"Collection not found\");",
													"",
													"    });",
													"",
													"pm.test(\"Content-Type is application/json\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/geo+json"
											},
											{
												"key": "token",
												"value": "{{C1secureResourceToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId/items",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId",
												"items"
											],
											"query": [
												{
													"key": "bbox",
													"value": "",
													"disabled": true
												},
												{
													"key": "datetime",
													"value": "<string>",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "unknowncollection",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Items describe features belonging to a collection (/collections/:collectionId)."
						},
						{
							"name": "describe the feature collection with id `collectionId`",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Assert Body (Collection)\", function () {",
											"    pm.response.to.have.json;",
											"    var jsonBody = pm.response.json();",
											"    pm.expect(jsonBody).to.have.property(\"id\");",
											"    pm.expect(jsonBody).to.have.property(\"links\");",
											"    pm.expect(jsonBody).to.have.property(\"crs\");",
											"    pm.expect(jsonBody).to.have.property(\"itemType\",\"FEATURE\");",
											"    const linkKeys = jsonBody.links[0];",
											"    pm.expect(linkKeys).to.have.property(\"href\");",
											"    pm.expect(linkKeys).to.have.property(\"rel\");",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "a5a6e26f-d252-446d-b7dd-4d50ea945102",
											"description": "(Required) local identifier of a collection"
										}
									]
								}
							},
							"response": [
								{
									"name": "Information about the feature collection with id `collectionId`.\n\nThe response contains a link to the items in the collection\n(path `/collections/{collectionId}/items`, link relation `items`)\nas well as key information about the collection. This informati",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "<string>",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"title\": \"<string>\",\n  \"description\": \"<string>\",\n  \"extent\": {\n    \"spatial\": {\n      \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n    },\n    \"temporal\": {\n      \"interval\": [\n        [\n          \"<dateTime>\",\n          \"<dateTime>\"\n        ]\n      ],\n      \"trs\": \"http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\"\n    }\n  },\n  \"itemType\": \"feature\",\n  \"crs\": [\n    \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n  ]\n}"
								},
								{
									"name": "The requested resource does not exist on the server. For example, a path parameter had an incorrect value.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "<string>",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "A server error occurred.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/collections/:collectionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"collections",
												":collectionId"
											],
											"variable": [
												{
													"key": "collectionId",
													"value": "<string>",
													"description": "(Required) local identifier of a collection"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Collection does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Collection not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Assert Body (features)\", function () {",
											"    pm.response.to.have.json;",
											"    var jsonBody = pm.response.json();",
											"    pm.expect(jsonBody).to.have.property(\"code\",\"Not found\");",
											"    pm.expect(jsonBody).to.have.property(\"description\",\"Collection not found\");",
											"    });",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/collections/:collectionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections",
										":collectionId"
									],
									"variable": [
										{
											"key": "collectionId",
											"value": "unknowncollection"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "the feature collections in the dataset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Assert Body (Collection)\", function () {",
									"    pm.response.to.have.json;",
									"    var jsonBody = pm.response.json();",
									"    pm.expect(jsonBody).to.have.property(\"links\");",
									"",
									"    pm.expect(jsonBody).to.have.property(\"collections\");",
									"    var collection = jsonBody.collections[0];",
									"    pm.expect(collection).to.have.property(\"id\");",
									"    pm.expect(collection).to.have.property(\"crs\");",
									"    pm.expect(collection).to.have.property(\"itemType\",\"FEATURE\");",
									"    const linkKeys = jsonBody.links[0];",
									"    pm.expect(linkKeys).to.have.property(\"href\");",
									"    pm.expect(linkKeys).to.have.property(\"rel\");",
									"    ",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/collections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"collections"
							]
						}
					},
					"response": [
						{
							"name": "The feature collections shared by this API.\n\nThe dataset is organized as one or more feature collections. This resource\nprovides information about and access to the collections.\n\nThe response contains the list of collections. For each collection, a link\nt",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"collections\": [\n    {\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ],\n      \"title\": \"<string>\",\n      \"description\": \"<string>\",\n      \"extent\": {\n        \"spatial\": {\n          \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n        },\n        \"temporal\": {\n          \"interval\": [\n            [\n              \"<dateTime>\",\n              \"<dateTime>\"\n            ]\n          ],\n          \"trs\": \"http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\"\n        }\n      },\n      \"itemType\": \"feature\",\n      \"crs\": [\n        \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n      ]\n    },\n    {\n      \"id\": \"<string>\",\n      \"links\": [\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        },\n        {\n          \"href\": \"<string>\",\n          \"rel\": \"<string>\",\n          \"type\": \"<string>\",\n          \"hreflang\": \"<string>\",\n          \"title\": \"<string>\",\n          \"length\": \"<integer>\"\n        }\n      ],\n      \"title\": \"<string>\",\n      \"description\": \"<string>\",\n      \"extent\": {\n        \"spatial\": {\n          \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n        },\n        \"temporal\": {\n          \"interval\": [\n            [\n              \"<dateTime>\",\n              \"<dateTime>\"\n            ]\n          ],\n          \"trs\": \"http://www.opengis.net/def/uom/ISO-8601/0/Gregorian\"\n        }\n      },\n      \"itemType\": \"feature\",\n      \"crs\": [\n        \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n      ]\n    }\n  ]\n}"
						},
						{
							"name": "A server error occurred.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"collections"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "STAC",
			"item": [
				{
					"name": "landing page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Assert Body (Landing page))\", function () {",
									"    pm.response.to.have.json;",
									"    var jsonBody = pm.response.json();",
									"    pm.expect(jsonBody).to.have.property(\"links\");",
									"    pm.expect(jsonBody).to.have.property(\"type\");",
									"    pm.expect(jsonBody).to.have.property(\"id\");",
									"     pm.expect(jsonBody).to.have.property(\"stac_version\");",
									"      pm.expect(jsonBody).to.have.property(\"conformsTo\");",
									"    const linkKeys = jsonBody.links[0];",
									"    pm.expect(linkKeys).to.have.property(\"href\");",
									"    pm.expect(linkKeys).to.have.property(\"rel\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stac",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stac"
							]
						}
					},
					"response": []
				},
				{
					"name": "fetch collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Assert Body (Collection)\", function () {",
									"    pm.response.to.have.json;",
									"    var jsonBody = pm.response.json();",
									"    pm.expect(jsonBody).to.have.property(\"links\");",
									"",
									"    pm.expect(jsonBody).to.have.property(\"collections\");",
									"    var collection = jsonBody.collections[0];",
									"    pm.expect(collection).to.have.property(\"id\");",
									"    const linkKeys = jsonBody.links[0];",
									"    pm.expect(linkKeys).to.have.property(\"href\");",
									"    pm.expect(linkKeys).to.have.property(\"rel\");",
									"    ",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stac/collections",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stac",
								"collections"
							]
						}
					},
					"response": []
				},
				{
					"name": "information about specifications that this API conforms to",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Assert Body (Conformance)\", function () {",
									"    pm.response.to.have.json;",
									"    var jsonBody = pm.response.json();",
									"    pm.expect(jsonBody).to.have.property(\"conformsTo\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stac/conformance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stac",
								"conformance"
							]
						}
					},
					"response": []
				},
				{
					"name": "STAC API specification details using OpenAPI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/vnd.oai.openapi+json;version=3.0\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stac/api",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stac",
								"api"
							]
						}
					},
					"response": []
				},
				{
					"name": "describe the  STAC collection with id `collectionId`",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Assert Body (Collection)\", function () {",
									"    pm.response.to.have.json;",
									"    var jsonBody = pm.response.json();",
									"    pm.expect(jsonBody).to.have.property(\"id\");",
									"    pm.expect(jsonBody).to.have.property(\"links\");",
									"    pm.expect(jsonBody).to.have.property(\"type\",\"Collection\");",
									"    const linkKeys = jsonBody.links[0];",
									"    pm.expect(linkKeys).to.have.property(\"href\");",
									"    pm.expect(linkKeys).to.have.property(\"rel\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stac/collections/a5a6e26f-d252-446d-b7dd-4d50ea945102",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stac",
								"collections",
								"a5a6e26f-d252-446d-b7dd-4d50ea945102"
							]
						}
					},
					"response": []
				},
				{
					"name": "fetches the STAC asset for open resource with id `assetId`",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{C1openResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/assets/4d69a28c-6717-4b80-83c8-308cfa40c931",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assets",
								"4d69a28c-6717-4b80-83c8-308cfa40c931"
							]
						}
					},
					"response": []
				},
				{
					"name": "fetches the STAC asset for secure resource with id `assetId`",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "token",
								"value": "{{C1secureResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/assets/462624da-2790-4ae7-8773-c1a6d726a035",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"assets",
								"462624da-2790-4ae7-8773-c1a6d726a035"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "landing page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Assert Body (Landing page))\", function () {",
							"    pm.response.to.have.json;",
							"    var jsonBody = pm.response.json();",
							"    pm.expect(jsonBody).to.have.property(\"links\");",
							"    const linkKeys = jsonBody.links[0];",
							"    pm.expect(linkKeys).to.have.property(\"href\");",
							"    pm.expect(linkKeys).to.have.property(\"rel\");",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						""
					]
				},
				"description": "The landing page provides links to the API definition, the conformance\nstatements and to the feature collections in this dataset."
			},
			"response": [
				{
					"name": "The landing page provides links to the API definition\n(link relations `service-desc` and `service-doc`),\nthe Conformance declaration (path `/conformance`,\nlink relation `conformance`), and the Feature\nCollections (path `/collections`, link relation\n`data`",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"links\": [\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    },\n    {\n      \"href\": \"<string>\",\n      \"rel\": \"<string>\",\n      \"type\": \"<string>\",\n      \"hreflang\": \"<string>\",\n      \"title\": \"<string>\",\n      \"length\": \"<integer>\"\n    }\n  ],\n  \"title\": \"<string>\",\n  \"description\": \"<string>\"\n}"
				},
				{
					"name": "A server error occurred.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "information about specifications that this API conforms to",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Assert Body (Conformance)\", function () {",
							"    pm.response.to.have.json;",
							"    var jsonBody = pm.response.json();",
							"    pm.expect(jsonBody).to.have.property(\"conformsTo\");",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/conformance",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"conformance"
					]
				},
				"description": "A list of all conformance classes specified in a standard that the\nserver conforms to."
			},
			"response": [
				{
					"name": "The URIs of all conformance classes supported by the server.\n\nTo support \"generic\" clients that want to access multiple\nOGC API Features implementations - and not \"just\" a specific\nAPI / server, the server declares the conformance\nclasses it implements an",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/conformance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conformance"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"conformsTo\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
				},
				{
					"name": "A server error occurred.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/conformance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conformance"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"code\": \"<string>\",\n  \"description\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "API specification details using OpenAPI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://www.example.org/ogcapi",
			"type": "string"
		},
		{
			"key": "uuidOfResource",
			"value": "iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta"
		}
	]
}
