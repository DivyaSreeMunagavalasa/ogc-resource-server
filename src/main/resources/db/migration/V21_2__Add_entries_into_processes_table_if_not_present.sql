-- insert process data into table if already exists
INSERT INTO processes_table (description, input, output, subscriber, title, version, keywords, response, mode) VALUES ('Process for onboarding a collection', '{"inputs": {"title": "Title of the file", "version": "1.0.0", "fileName": "File Name", "resourceId": "resource-Id", "description": "Description of the file"}}', '{"type": "type of the job created", "jobId": "jobId once created", "status": "status of the job", "processId": "process id for which the job is created"}', 'CollectionOnboarding', 'CollectionOnboarding', '1.0.0', '{collection,onboarding}', '{ASYNC}', '{VALUE}') ON CONFLICT (title) DO NOTHING;
INSERT INTO processes_table (description, input, output, subscriber, title, version, keywords, response, mode) VALUES ('Process for appending an existing collection', '{"inputs": {"title": "Title of the file", "version": "1.0.0", "fileName": "File Name", "resourceId": "resource-Id", "description": "Description of the file"}}', '{"type": "type of the job created", "jobId": "jobId once created", "status": "status of the job", "processId": "process id for which the job is created"}', 'CollectionAppending', 'CollectionAppending', '1.0.0', '{collection,appending}', '{ASYNC}', '{VALUE}') ON CONFLICT (title) DO NOTHING;
INSERT INTO processes_table (description, input, output, subscriber, title, version, keywords, response, mode) VALUES ('Process for onboarding tiles meta data', '{"inputs": {"bbox": ["minLongitude", "minLatitude", "maxLongitude", "maxLatitude"], "title": "title-of-tile", "encoding": "encoding-format-of-tile", "temporal": ["start-date-time", "end-date-time"], "resourceId": "resource-Id", "description": "description-of-tile", "pointOfOrigin": ["longitude", "latitude"], "tileMatrixSet": "tms-projection-type", "testTileCoordinateIndexes": "0/0/0"}}', NULL, 'TilesMetaDataOnboarding', 'TilesMetaDataOnboarding', '1.0.0', '{tiles,metadata,onboarding}', '{ASYNC}', '{VALUE}') ON CONFLICT (title) DO NOTHING;
INSERT INTO processes_table (description, input, output, subscriber, title, version, keywords, response, mode) VALUES ('Process to complete the S3 multi part upload', '{"inputs": {"parts": ["partNumber1:eTagValue1", "partNumber2:eTagValue2"], "filePath": "s3KeyName", "uploadId": "upload-id", "bucketName": "AWS S3 Bucket Name"}}', '{"message": "Upload Completed", "location": "https://bucket-name.s3.amazonaws.com/s3KeyName"}', NULL, 'S3CompleteMultipartUpload', '1.0.0', '{s3multipart,upload,complete}', '{SYNC}', '{VALUE}') ON CONFLICT (title) DO NOTHING;
INSERT INTO processes_table (description, input, output, subscriber, title, version, keywords, response, mode) VALUES ('Process to initiate the S3 multi part upload', '{"inputs": {"itemId": "item-id", "fileName": "file-name", "fileSize": 500000, "fileType": "file-type", "bucketName": "AWS S3 Bucket Name", "collectionId": "resource-id"}}', '{"uploadId": "upload-id", "chunkSize": 50000, "totalParts": 3, "presignedUrls": [{"url": "https://s3-presigned-url-1", "partNumber": 1}, {"url": "https://s3-presigned-url-2", "partNumber": 2}, {"url": "https://s3-presigned-url-3", "partNumber": 3}, {"url": "https://s3-presigned-url-4", "partNumber": 4}, {"url": "https://s3-presigned-url-5", "partNumber": 5}]}', NULL, 'S3InitiateMultipartUpload', '1.0.0', '{s3multipart,upload,initiate}', '{SYNC}', '{VALUE}') ON CONFLICT (title) DO NOTHING;
INSERT INTO processes_table (description, input, output, subscriber, title, version, keywords, response, mode) VALUES ('Process to onboard MVT tiles from existing feature collections with WorldCRS84Quad tiling scheme', '{"inputs": {"resourceId": "resource-Id", "maxZoomLevel": "max-zoom-level", "minZoomLevel": "min-zoom-level", "pointOfOrigin": "point-of-origin"}}', '{"type": "type of the job created", "jobId": "jobId once created", "status": "status of the job", "processId": "process id for which the job is created"}', NULL, 'TilesOnboardingFromExistingFeature', '1.0.0', '{tiles,onboarding,existingfeature}', '{ASYNC}', '{VALUE}') ON CONFLICT (title) DO NOTHING;
INSERT INTO processes_table (description, input, output, subscriber, title, version, keywords, response, mode) VALUES ('Process to create Pre-Signed URL', '{"inputs": {"region": "AWS S3 Region", "fileType": "Type of the file which gets uploaded into S3", "bucketName": "AWS S3 Bucket Name", "resourceId": "resource-Id"}}', '{"status": "SUCCESSFUL", "message": "Pre-Signed URL generation process completed successfully.", "S3PreSignedUrl": "Generated pre-signed URL", "s3ObjectKeyName": "Name of the File Object which gets uploaded into S3"}', NULL, 'S3PreSignedURLGeneration', '1.0.0', '{presigned,urlgeneration,featuresonboarding}', '{SYNC}', '{VALUE}') ON CONFLICT (title) DO NOTHING;
